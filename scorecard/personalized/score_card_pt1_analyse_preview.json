{
  "name": "score card pt1 analyse preview",
  "nodes": [
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -380,
        -160
      ],
      "id": "a024e5fa-0b85-4fa3-8e73-45db688fd9d8",
      "name": "Merge"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "chatgpt-4o-latest",
          "mode": "list",
          "cachedResultName": "CHATGPT-4O-LATEST"
        },
        "messages": {
          "values": [
            {
              "content": "\n\n```\nJe bent een expert in digitale bedrijfsprocessen automatisering met focus op praktische implementatie. Je beoordeelt taken op basis van de technische complexiteit om ze te automatiseren. Let op enkel digitale taken kunnen worden geautomatiseerd robots of lopende banden zijn hier niet van toepassing enkel digitale automatiseringen. Geef als output \"category\": \"NIET DIGITAAL\" als de taak niet digitaal is   \n\n##Je krijgt een of meerdere taken binnen krijgen allemaal een automatisering score de scores 4 makkelijk tot 1 zeer lastig om te automatiseren en score 0 niet automatiseren.\n\n### Het kunnen 2 verschillende soorten zijn:\n- isanderstask deze zijn handmatig ingevuld en moeten geanalyseerd worden\n- ispriority deze zijn belangrijk voor de gebruiker. Het is mogelijk dat een taak een combinatie is van een anderstask. Bij een priority task zit een uitleg waarom deze volgens de gebruiker impact heeft bij automatiseren.\n-Heeft deze taak een goede automatiseringsscore: Bevestig deze reden dan op een vriendelijke manier met een andere bewoording dan de uitleg\n-Heeft deze taak een slechte automatiseringsscore: leg dan op een vriendelijke manier uit waarom hier weinig winst mee te behalen is met een andere bewoording dan de uitleg\n-Heeft deze taak een goede automatiseringsscore, maar kost deze taak minder dan 8 uur per maand: leg dan uit dat deze taak goed te automatiseren is maar er weinig tijdwinst te halen is op een vriendelijke manier met een andere bewoording dan de uitleg\n### het doel is om het automatiseringspotentieel te bepalen en een korte uitleg van maximaal 2 zinnen te geven waarom deze taak wel/niet/redelijk/heel goed geautomatiseerd kan worden. \n\n###Eerst ga je door de lijst met bestaande taken hieronder om te kijken of deze hier heel erg op lijken. zeker qua moeilijkheidsgraad om te automatiseren. Twijfel je over de moeilijkheidsgraad die staat verder op duidelijk uitgelegd. \n\n###Let op email lezen en email sturen lijkt op elkaar maar is heel verschillend om te automatiseren dus let goed op dat je niet alleen kijkt of de taken op elkaar lijken.\n\n###lijst met taken\n  \"Data invoeren/overzetten\": 3,\n  \"Data analyse\": 3,\n  \"Gegevens opzoeken\": 3,\n  \"Rapporten maken\": 2,\n  \"Emails/offertes versturen\": 2,\n  \"Planning/roosters maken\": 2,\n  \"Herhalende administratieve klussen\": 2,\n  \"Werken met Excel bestanden\": 4,\n  \"Klantgegevens bijwerken/opzoeken\": 2,\n  \"Documenten archiveren/opslaan\": 1,\n  \"Status updates geven\": 2,\n  \"Contracten/documenten opstellen\": 2,\n  \"KPI's/cijfers verzamelen\": 4,\n  \"Agenda's/afspraken beheren\": 1\n\n### staat er geen vergelijkbare taak tussen ga dan verder met de volgende stappen\n\n## Automatisering Scores (1-4):\n\n### Score 4 - BEGINNER (Make.com niveau)\n- **Kennis**: Beginner kan dit in Make.com/Zapier bouwen\n- **Complexiteit**: Simpele input → output, vaste regels\n- **Voorbeelden**: \n  - \"Naam\" splitsen in \"Voornaam\" + \"Achternaam\"\n  - Excel rij → Database record\n  - Email met vaste template versturen\n- **Standaard taken score 4**: Excel bestanden, KPI's verzamelen\n\n### Score 3 - GEVORDERD (N8N + beetje code)\n- **Kennis**: N8N gebruiker met basis programmeerkennis\n- **Complexiteit**: Input moet gefilterd/opgeschoond, kleine LLM stappen OK\n- **Voorbeelden**:\n  - Data uit verschillende formaten harmoniseren\n  - Simpele IF/THEN logica met uitzonderingen\n  - API calls met error handling\n- **Standaard taken score 3**: Data invoeren, analyse, opzoeken\n\n### Score 2 - EXPERT (Complexe workflows)\n- **Kennis**: Gevorderde developer nodig\n- **Complexiteit**: \n  - Meerdere bronnen/systemen\n  - Veel LLM stappen voor interpretatie\n  - Uitgebreide error handling\n  - Custom integraties\n- **Standaard taken score 2**: Rapporten, emails/offertes, planning\n\n### Score 1 - ZEER COMPLEX (Specialist nodig)\n- **Kennis**: Domein specialist + senior developer\n- **Complexiteit**:\n  - Te veel variaties/uitzonderingen\n  - Menselijk inzicht cruciaal\n  - Consequente output bijna onmogelijk\n- **Standaard taken score 1**: Archiveren, agenda beheer\n\n### score 0 ⚠️ NIET AUTOMATISEREN (Label: \"MENSELIJK_CONTACT_VEREIST\"):\n- **Directe klantcommunicatie** met sales/support karakter:\n  - Verkoop gesprekken (email/telefoon/chat)\n  - Klachtenafhandeling\n  - Prijsonderhandelingen\n  - Relatiebeheer\n- **Waarom**: AI detectie → klanten haken af → reputatieschade\n\n## ✅ WEL AUTOMATISEREN:\n- Email classificatie/filtering\n- Geautomatiseerde antwoorden op FAQ\n- Cold email campagnes (outbound)\n- Lead verrijking/research\n- Interne communicatie\n\n## Output Format:\n{\n  \"task_name\": \"originele naam\",\n  \"category\": \"matched_standard_task of custom categorisatie\",\n  \"automation_score\": 0-4,\n  \"reasoning\": \"uitleg waarom deze score\",\n  \"warnings\": [\"array met waarschuwingen\"],\n  \"needs_human_review\": true/false,\n  \"review_reason\": \"alleen bij needs_review=true\"\n}\n\n## Voorbeelden:\n\nInput: \"Klanten bellen voor tevredenheidsonderzoek\"\n{\n  \"task_name\": \"Klanten bellen voor tevredenheidsonderzoek\",\n  \"category\": \"Klantcommunicatie\",\n  \"automation_score\": null,\n  \"warnings\": [\"MENSELIJK_CONTACT_VEREIST\", \"Telefooncontact moet persoonlijk blijven\"],\n  \"reasoning\": \"Directe klantcommunicatie via telefoon moet menselijk blijven\"\n}\n\nInput: \"Facturen uit email halen en in boekhouding zetten\"\n{\n  \"task_name\": \"Facturen uit email halen en in boekhouding zetten\",\n  \"category\": \"Document verwerking\",\n  \"automation_score\": 3,\n  \"reasoning\": \"Email parsing + OCR + API koppeling is goed te doen met wat custom code\"\n}\n\nInput: \"Product beschrijvingen schrijven voor webshop\"\n{\n  \"task_name\": \"Product beschrijvingen schrijven voor webshop\",\n  \"category\": \"Content generatie\",\n  \"automation_score\": 3,\n  \"reasoning\": \"LLM kan consistente product beschrijvingen genereren met juiste template\"\n}\n\nBELANGRIJK: \n- Bij sales/support communicatie → altijd \"niet_doen\"\n- Bij twijfel over complexiteit → needs_human_review = true\n- Wees realistisch over implementatie tijd \n- Reasoning in 1 zin beschrijven als het niet anders kan in MAXIMAAL 2 zinnen. Niet     meer!\n- Gebruik een zeer informele tone off voice en zo weinig mogelijk technische termen.\n```\n\n## 🔧 N8N Implementation:\n\n```javascript\n// In je Code node voor LLM prep\nconst SYSTEM_PROMPT = `[hele prompt hierboven]`;\n\nconst andersTaken = submission.anders_tasks || [];\nconst andersErgernissen = submission.anders_ergernissen || [];\nconst andersObstacles = submission.anders_obstacles || [];\n\nreturn [{\n  json: {\n    submission_id: $input.first().json.submission_id,\n    system_prompt: SYSTEM_PROMPT,\n    user_prompt: `\nAnalyseer deze \"anders\" taken:\n${andersTaken.map((t, i) => `${i+1}. \"${t}\"`).join('\\n')}\n\nGeef voor ELKE taak een volledig JSON object volgens het format.\nLet speciaal op taken die menselijk contact vereisen.\n`\n  }\n}];\n```\n\n",
              "role": "system"
            },
            {
              "content": "=Analyseer deze taken:\nTaken: {{ JSON.stringify($json, null, 2) }} \n\nGeef voor elke taak een score van 0-4. als deze een isanderstask is een ispriority heeft al een score"
            }
          ]
        },
        "simplify": false,
        "jsonOutput": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -760,
        -220
      ],
      "id": "0ce11b61-e90c-4df0-8bd4-39e7370a591d",
      "name": "anders taken kwalificeren",
      "credentials": {
        "openAiApi": {
          "id": "mP2R3VAiIxGzgpKH",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "149b03cf-8423-4298-96d9-2a9b81f54cbc",
              "leftValue": "{{ $json.body.data.anders_tasks }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1200,
        -80
      ],
      "id": "9f182e81-8adf-4b3b-b13e-241d6425f9f8",
      "name": "If andere taken ingevuld"
    },
    {
      "parameters": {
        "jsCode": "// Get tasks array from the webhook data\nconst tasks = $input.first().json.body.data.tasks;\n\n// Filter alleen tasks waar isPriority = true OF isAndersTask = true\nconst filteredTasks = tasks.filter(task => \n  task.isPriority === true || task.isAndersTask === true\n);\n\n// Return alleen de gefilterde taken\nreturn filteredTasks;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -980,
        -220
      ],
      "id": "de11b2b0-c4f4-4630-91d2-cd1ac81f3e29",
      "name": "Code"
    },
    {
      "parameters": {
        "jsCode": "// Get the input data\nconst webhookData = $input.first().json.body.data;\nconst llmResult = $input.first().json.choices[0].message.content;\n\n// Define savings percentages based on automation score\nconst savingsPercentages = {\n  4: 0.92,  // 92% - Bijna volledig automatiseerbaar\n  3: 0.81,  // 81% - Grotendeels automatiseerbaar\n  2: 0.67,  // 67% - Deels automatiseerbaar\n  1: 0.50,  // 50% - Beperkt automatiseerbaar\n  0: 0      // 0%  - Niet automatiseerbaar\n};\n\n// Label assignment based on automation score AND hours combination\nfunction getTaskLabel(automationScore, hours, score) {\n  // Automation Score 4\n  if (automationScore === 4) {\n    if (hours > 100) return { \n      label: \"Bulls Eye\", \n      emoji: \"🎯\", \n      priority: 1,\n      category: \"🏆 Absolute Toppers\",\n      categoryPriority: 1\n    };\n    if (hours >= 51 && hours <= 100) return { \n      label: \"No Brainer\", \n      emoji: \"🧠\", \n      priority: 2,\n      category: \"🏆 Absolute Toppers\",\n      categoryPriority: 1\n    };\n    if (hours >= 26 && hours <= 50) return { \n      label: \"Quick Win\", \n      emoji: \"🚀\", \n      priority: 3,\n      category: \"⭐ Zeer Hoge Prioriteit\",\n      categoryPriority: 2\n    };\n    if (hours >= 11 && hours <= 25) return { \n      label: \"Efficiency Booster\", \n      emoji: \"📈\", \n      priority: 6,\n      category: \"🎯 Hoge Prioriteit\",\n      categoryPriority: 3\n    };\n    if (hours <= 10) return { \n      label: \"Mini Winst\", \n      emoji: \"🌱\", \n      priority: 11,\n      category: \"📊 Net Onder Top 3\",\n      categoryPriority: 5\n    };\n  }\n  \n  // Automation Score 3\n  if (automationScore === 3) {\n    if (hours > 100) return { \n      label: \"Laag Hangend Fruit\", \n      emoji: \"🍎\", \n      priority: 4,\n      category: \"⭐ Zeer Hoge Prioriteit\",\n      categoryPriority: 2\n    };\n    if (hours >= 51 && hours <= 100) return { \n      label: \"Tijdwinst Topper\", \n      emoji: \"⏰\", \n      priority: 5,\n      category: \"🎯 Hoge Prioriteit\",\n      categoryPriority: 3\n    };\n    if (hours >= 26 && hours <= 50) return { \n      label: \"Solide Keuze\", \n      emoji: \"💪\", \n      priority: 7,\n      category: \"🎯 Hoge Prioriteit\",\n      categoryPriority: 3\n    };\n    if (hours >= 11 && hours <= 25) return { \n      label: \"Slimme Zet\", \n      emoji: \"🎪\", \n      priority: 10,\n      category: \"📊 Net Onder Top 3\",\n      categoryPriority: 5\n    };\n    if (hours <= 10) return { \n      label: \"Kleine Versnelling\", \n      emoji: \"⚡\", \n      priority: 14,\n      category: \"📊 Net Onder Top 3\",\n      categoryPriority: 5\n    };\n  }\n  \n  // Automation Score 2\n  if (automationScore === 2) {\n    if (hours > 100) return { \n      label: \"Volume Voordeel\", \n      emoji: \"📊\", \n      priority: 8,\n      category: \"🎯 Hoge Prioriteit\",\n      categoryPriority: 3\n    };\n    if (hours >= 51 && hours <= 100) return { \n      label: \"Substantiële Verbetering\", \n      emoji: \"✨\", \n      priority: 9,\n      category: \"✅ Top 3 Ondergrens\",\n      categoryPriority: 4\n    };\n    if (hours >= 26 && hours <= 50) return { \n      label: \"Degelijke Optie\", \n      emoji: \"👍\", \n      priority: 12,\n      category: \"📊 Net Onder Top 3\",\n      categoryPriority: 5\n    };\n    if (hours >= 11 && hours <= 25) return { \n      label: \"Basis Verbetering\", \n      emoji: \"🔧\", \n      priority: 15,\n      category: \"⚡ Overwegen Bij Specifieke Pijn\",\n      categoryPriority: 6\n    };\n    if (hours <= 10) return { \n      label: \"Eerste Stapje\", \n      emoji: \"👣\", \n      priority: 17,\n      category: \"⚡ Overwegen Bij Specifieke Pijn\",\n      categoryPriority: 6\n    };\n  }\n  \n  // Automation Score 1\n  if (automationScore === 1) {\n    if (hours > 100) return { \n      label: \"Bulk Uitdaging\", \n      emoji: \"🏔️\", \n      priority: 13,\n      category: \"📊 Net Onder Top 3\",\n      categoryPriority: 5\n    };\n    if (hours >= 51 && hours <= 100) return { \n      label: \"Complexe Massa\", \n      emoji: \"🧩\", \n      priority: 16,\n      category: \"⚡ Overwegen Bij Specifieke Pijn\",\n      categoryPriority: 6\n    };\n    if (hours >= 26 && hours <= 50) return { \n      label: \"Beperkt Potentieel\", \n      emoji: \"📉\", \n      priority: 18,\n      category: \"❌ Lage Prioriteit\",\n      categoryPriority: 7\n    };\n    if (hours >= 11 && hours <= 25) return { \n      label: \"Minimaal Effect\", \n      emoji: \"🔸\", \n      priority: 19,\n      category: \"❌ Lage Prioriteit\",\n      categoryPriority: 7\n    };\n    if (hours <= 10) return { \n      label: \"Verwaarloosbaar\", \n      emoji: \"⚠️\", \n      priority: 20,\n      category: \"❌ Lage Prioriteit\",\n      categoryPriority: 7\n    };\n  }\n  \n  // Default fallback (should not happen)\n  return { \n    label: \"Niet Gecategoriseerd\", \n    emoji: \"❓\", \n    priority: 99,\n    category: \"❌ Lage Prioriteit\",\n    categoryPriority: 7\n  };\n}\n// Automation potential calculation\nfunction calculateAutomationPotential(top3Tasks, totalHoursSaved) {\n  if (top3Tasks.length === 0) return \"❌ Slecht potentieel\";\n  \n  // Tel super sterke taken (cat 1-2)\n  const superTasks = top3Tasks.filter(t => t.categoryPriority <= 2).length;\n  const topTask = top3Tasks[0]; // Beste taak\n  \n  // EXTREEM - alleen voor echte uitschieters\n  if (superTasks >= 2 && totalHoursSaved >= 100) {\n    return \"🔥 Extreem potentieel\";\n  }\n  \n  // HEEL HOOG\n  if (superTasks >= 2 || // 2+ toppers\n      (superTasks === 1 && topTask.categoryPriority === 1 && totalHoursSaved >= 80) || // 1 Bulls Eye + veel uren\n      (top3Tasks.length === 3 && top3Tasks[2].categoryPriority <= 3)) { // 3 sterke taken\n    return \"⭐ Heel hoog potentieel\";\n  }\n  \n  // HOOG\n  if (superTasks >= 1 || // Minstens 1 topper\n      (topTask.categoryPriority <= 3 && totalHoursSaved >= 60) || // Goede taak + flinke uren\n      (top3Tasks.length === 3 && top3Tasks[2].categoryPriority <= 4)) { // 3 degelijke taken\n    return \"💪 Hoog potentieel\";\n  }\n  \n  // REDELIJK\n  if (topTask.categoryPriority <= 4 || // Minstens 1 OK taak\n      totalHoursSaved >= 40) { // Of gewoon veel uren\n    return \"👍 Redelijk potentieel\";\n  }\n  \n  // SLECHT\n  return \"🌱 Slecht potentieel\";\n}\n// Process all tasks - GEEN taskScores meer nodig!\nconst mergedTasks = webhookData.tasks.map(task => {\n  let finalTask = { ...task };\n  \n  // Check if this task was analyzed by LLM (priority or anders task)\n  const taskNameToCheck = task.taskName.toLowerCase();\n  const llmTaskName = llmResult.task_name?.toLowerCase();\n  \n  if (taskNameToCheck === llmTaskName) {\n    // Apply LLM results\n    if (task.isAndersTask) {\n      // Voor anders taken: gebruik LLM automation score\n      const llmScore = llmResult.automation_score;\n      \n      if (llmScore !== null && llmScore > 0) {\n        // Calculate score: automation_score² × hours_multiplier × priority_bonus\n        let calculatedScore = Math.pow(llmScore, 2) * task.hoursMultiplier;\n        \n        // Apply priority bonus if applicable\n        if (task.isPriority) {\n          calculatedScore *= 1.2;\n        }\n        \n        // Calculate potential saving\n        const savingPercentage = savingsPercentages[llmScore] || 0.7;\n        const potentialSaving = Math.round(task.hours * savingPercentage);\n        const actualSavingPercentage = Math.round(savingPercentage * 100);\n        \n        finalTask = {\n          ...task,\n          automationScore: llmScore,\n          score: calculatedScore,\n          potentialSaving: potentialSaving,\n          savingPercentage: actualSavingPercentage,\n          llmCategory: llmResult.category,\n          llmReasoning: llmResult.reasoning,\n          llmWarnings: llmResult.warnings || [],\n          isAutomatiseerbaar: true\n        };\n      } else {\n        // Niet automatiseerbaar\n        finalTask = {\n          ...task,\n          automationScore: llmScore || 0,\n          score: 0,\n          potentialSaving: 0,\n          savingPercentage: 0,\n          llmCategory: llmResult.category,\n          llmReasoning: llmResult.reasoning,\n          llmWarnings: llmResult.warnings || [],\n          isAutomatiseerbaar: false\n        };\n      }\n    } else if (task.isPriority) {\n      // Voor priority taken: voeg LLM feedback toe\n      finalTask = {\n        ...finalTask,\n        llmFeedback: llmResult.reasoning\n      };\n    }\n  }\n  \n  // Voor taken die al een automation score hebben (niet-anders taken)\n  if (finalTask.automationScore && finalTask.automationScore > 0 && !finalTask.isAndersTask) {\n    const savingPercentage = savingsPercentages[finalTask.automationScore] || 0.7;\n    const potentialSaving = Math.round(finalTask.hours * savingPercentage);\n    const actualSavingPercentage = Math.round(savingPercentage * 100);\n    \n    finalTask = {\n      ...finalTask,\n      potentialSaving: potentialSaving,\n      savingPercentage: actualSavingPercentage,\n      isAutomatiseerbaar: true\n    };\n  }\n  \n  // Add labels to all tasks with scores\n  if (finalTask.score > 0) {\n    const labelData = getTaskLabel(finalTask.automationScore, finalTask.hours, finalTask.score);\n    finalTask = {\n      ...finalTask,\n      taskLabel: labelData.label,\n      taskEmoji: labelData.emoji,\n      taskPriority: labelData.priority,\n      taskCategory: labelData.category,\n      categoryPriority: labelData.categoryPriority\n    };\n  }\n  \n  return finalTask;\n});\n\n// Sort all tasks by score (highest first)\nconst sortedTasks = mergedTasks.sort((a, b) => {\n  if (a.score === null || a.score === 0) return 1;\n  if (b.score === null || b.score === 0) return -1;\n  return b.score - a.score;\n});\n\n// ADD RANKING to all tasks\nconst rankedTasks = sortedTasks.map((task, index) => ({\n  ...task,\n  rank: index + 1  // Rank 1 = beste, 2 = op een na beste, etc.\n}));\n\n// Get top 3 automatiseerbare taken\nconst top3Tasks = rankedTasks\n  .filter(task => task.score > 0)\n  .slice(0, 3);\n\n// Check if priority task is in top 3\nconst priorityTask = rankedTasks.find(task => task.isPriority);\nconst priorityInTop3 = top3Tasks.some(task => task.taskName === priorityTask?.taskName);\n\n// Calculate total potential savings\nconst totalPotentialSaving = rankedTasks\n  .filter(task => task.potentialSaving > 0)\n  .reduce((sum, task) => sum + task.potentialSaving, 0);\n\n// Prepare clean output\nreturn {\n  session_id: webhookData.session_id,\n  branche: webhookData.branche,\n  bedrijfs_omschrijving: webhookData.bedrijfs_omschrijving,\n  team_size: webhookData.team_size,\n  source_type: webhookData.source_type,\n  total_hours: webhookData.total_hours,\n  systems_count: webhookData.systems_count,\n  ergernissen: webhookData.ergernissen,\n  obstacles: webhookData.obstacles,\n  fire_percentage: webhookData.fire_percentage,\n  missed_revenue: webhookData.missed_revenue,\n  automation_potential: calculateAutomationPotential(top3Tasks, totalPotentialSaving),\n  anders_tasks: webhookData.anders_tasks || [],\n  anders_ergernissen: webhookData.anders_ergernissen || [],\n  anders_obstacles: webhookData.anders_obstacles || [],\n    \n  // All tasks with merged data AND RANKING - GEEN JSON.stringify!\n  all_tasks: rankedTasks,\n  \n  // Top 3 recommendations - GEEN JSON.stringify!\n  top_3_tasks: top3Tasks,\n  \n  // Priority task analysis - dit is al een object, dus goed\n  priority_task_info: {\n    task_name: priorityTask?.taskName,\n    reason: webhookData.priority_reason,\n    in_top_3: priorityInTop3,\n    rank: priorityTask?.rank,\n    score: priorityTask?.score,\n    saving_percentage: priorityTask?.savingPercentage,\n    label: priorityTask?.taskLabel,\n    emoji: priorityTask?.taskEmoji\n  },\n  \n  // Summary statistics - GEEN JSON.stringify!\n  summary: {\n    total_automatiseerbare_taken: rankedTasks.filter(t => t.score > 0).length,\n    total_potential_hours_saved: totalPotentialSaving,\n    percentage_time_saved: Math.round((totalPotentialSaving / webhookData.total_hours) * 100),\n    niet_automatiseerbare_taken: rankedTasks.filter(t => t.score === 0).map(t => t.taskName),\n    gemiddelde_besparing_percentage: Math.round(\n      rankedTasks\n        .filter(t => t.savingPercentage > 0)\n        .reduce((sum, t) => sum + t.savingPercentage, 0) / \n      rankedTasks.filter(t => t.savingPercentage > 0).length\n    ) || 0  // Voeg || 0 toe voor als er geen taken met savings zijn\n  },\n  \n  // created_at hoort Supabase automatisch te doen, dus deze kunnen we weglaten\n  created_at: webhookData.created_at\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -160,
        -80
      ],
      "id": "6e87af63-8b41-48cb-9ff2-21873a1f06e3",
      "name": "Code merge data samenvoegen, scores ,labels toevoegen"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "aad217b2-84d5-4705-862d-b62c7b763c1c",
        "options": {
          "responseData": "\"First Entry JSON\""
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1420,
        -80
      ],
      "id": "909d6fe8-d819-4199-ba2f-0ec32ccd731f",
      "name": "Webhook invullen score card",
      "webhookId": "aad217b2-84d5-4705-862d-b62c7b763c1c"
    },
    {
      "parameters": {
        "tableId": "scorecard_submissions",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "session_id",
              "fieldValue": "={{ $json.session_id }}"
            },
            {
              "fieldId": "branche",
              "fieldValue": "={{ $json.branche }}"
            },
            {
              "fieldId": "bedrijfs_omschrijving",
              "fieldValue": "={{ $json.bedrijfs_omschrijving }}"
            },
            {
              "fieldId": "team_size",
              "fieldValue": "={{ $json.team_size }}"
            },
            {
              "fieldId": "systems_count",
              "fieldValue": "={{ $json.systems_count }}"
            },
            {
              "fieldId": "ergernissen",
              "fieldValue": "={{ $json.ergernissen }}"
            },
            {
              "fieldId": "obstacles",
              "fieldValue": "={{ $json.obstacles }}"
            },
            {
              "fieldId": "fire_percentage",
              "fieldValue": "={{ $json.fire_percentage }}"
            },
            {
              "fieldId": "missed_revenue",
              "fieldValue": "={{ $json.missed_revenue }}"
            },
            {
              "fieldId": "automation_potential",
              "fieldValue": "={{ $json.automation_potential }}"
            },
            {
              "fieldId": "all_tasks",
              "fieldValue": "={{ $json.all_tasks }}"
            },
            {
              "fieldId": "top_3_tasks",
              "fieldValue": "={{ $json.top_3_tasks }}"
            },
            {
              "fieldId": "summary",
              "fieldValue": "={{ $json.summary }}"
            },
            {
              "fieldId": "total_hours",
              "fieldValue": "={{ $json.total_hours }}"
            },
            {
              "fieldId": "anders_tasks",
              "fieldValue": "={{ $json.anders_tasks }}"
            },
            {
              "fieldId": "anders_ergernissen",
              "fieldValue": "={{ $json.anders_ergernissen }}"
            },
            {
              "fieldId": "anders_obstacles",
              "fieldValue": "={{ $json.anders_obstacles }}"
            },
            {
              "fieldId": "session_id",
              "fieldValue": "={{ $json.session_id }}"
            },
            {
              "fieldId": "created_at",
              "fieldValue": "={{ $json.created_at }}"
            },
            {
              "fieldId": "source_type",
              "fieldValue": "={{ $json.source_type }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        60,
        -80
      ],
      "id": "6defae11-1017-46a3-85ef-c6f55511f6db",
      "name": "Supabase",
      "credentials": {
        "supabaseApi": {
          "id": "fkcmvzJ1VMVkT9FC",
          "name": "Supabase alpaca intern"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Merge": {
      "main": [
        [
          {
            "node": "Code merge data samenvoegen, scores ,labels toevoegen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "anders taken kwalificeren": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If andere taken ingevuld": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          },
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code merge data samenvoegen, scores ,labels toevoegen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "anders taken kwalificeren",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code merge data samenvoegen, scores ,labels toevoegen": {
      "main": [
        [
          {
            "node": "Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook invullen score card": {
      "main": [
        [
          {
            "node": "If andere taken ingevuld",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase": {
      "main": [
        []
      ]
    }
  },
  "active": true,
  "settings": {},
  "versionId": "093da2e3-c65a-498f-a044-58133b75eca4",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "197e3373f83fda44e0b7035dd69b207167d454dc1dd053c097ce4d6fbffbff08"
  },
  "id": "AGu7BsFLR4QPvqZc",
  "tags": []
}